name: Build and Release Python Executable

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: write
  issues: write

permissions:
  contents: write
  issues: write

env:
  CARGO_TERM_COLOR: always
  EXECUTABLE_NAME: "hack_the_planet"
  INITIAL_VERSION: "1.0.0"
  VERSION_ID: "1.0.${{ github.run_number }}"
  ZIP_NAME: ""

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.filter.outputs.version }}
      should_run: ${{ steps.filter.outputs.should_run }}
    steps:
      - name: create zip name
        run: echo "ZIP_NAME=${{ env.EXECUTABLE_NAME }}_macos.zip" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get current version
        id: get_version
        uses: anothrNick/github-tag-action@1.64.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BUMP: #none
          WITH_V: true
      
      - name: Extract commit message
        id: extract_commit_message
        run: echo "commit_message=$(git log --format=%B -n 1 HEAD)" >> $GITHUB_ENV

      - name: Determine build necessity and increment version
        id: filter
        run: |
          if [[ "$commit_message" == "major:"* ]]; then
            echo "should_run=true" >> $GITHUB_ENV
            echo "::set-output name=version::$(echo ${{ steps.get_version.outputs.new_tag }} | awk -F. '{print $1+1 "." $2 "." $3}')"
          elif [[ "$commit_message" == "minor:"* ]]; then
            echo "should_run=true" >> $GITHUB_ENV
            echo "::set-output name=version::$(echo ${{ steps.get_version.outputs.new_tag }} | awk -F. '{print $1 "." $2+1 "." $3}')"
          elif [[ "$commit_message" == "patch:"* ]]; then
            echo "should_run=true" >> $GITHUB_ENV
            echo "::set-output name=version::$(echo ${{ steps.get_version.outputs.new_tag }} | awk -F. '{print $1 "." $2 "." $3+1}')"
          else
            echo "should_run=false" >> $GITHUB_ENV
          fi

  build-executable:
    needs: [check-version]
    if: needs.check-version.outputs.should_run == 'true'
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Executable with PyInstaller
        uses: sayyid5416/pyinstaller@v1
        with:
          python_ver: "3.12"
          spec: "main.py"
          requirements: "requirements.txt"

      - name: Rename executable for consistency across platforms
        run: mv dist/main dist/${{ env.EXECUTABLE_NAME }}

      - name: Zip the executable
        run: |
          cd dist
          zip -r ${{ env.ZIP_NAME }} ${{ env.EXECUTABLE_NAME }}

      - name: Upload executable as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.EXECUTABLE_NAME }}
          path: dist/${{ env.ZIP_NAME }}

  create-release:
    needs: [check-version, build-executable]
    if: needs.check-version.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download executable artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.EXECUTABLE_NAME }}
          path: ./dist/

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: ./dist/${{ env.ZIP_NAME }}
          tag_name: ${{ needs.check-version.outputs.version }}
          name: Release ${{ needs.check-version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
